apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: metadig
spec:
  selector:
    matchLabels:
      app: postgres
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres
    spec:
      #serviceAccountName: metadig-serviceaccount
      containers:
      - name: postgres
        image: docker.io/postgres:10.7-alpine
        command: [ "su", "-", "postgres", "-c", "postgres -D /opt/local/postgresql/data" ]
        ports:
        - name: postgres
          containerPort: 5432
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: nfs-pv
          mountPath: "/opt/local"
          readOnly: false
      - name: pgbouncer
        #image: edoburu/pgbouncer:1.9.0
        image: bitnami/pgbouncer:1.16.1
        #command: [ "/bin/sh", "-c", "pgbouncer -v /opt/local/pgbouncer/pgbouncer.ini" ]
        command: [ "su", "-", "postgres", "-c", "pgbouncer -v /opt/local/pgbouncer/pgbouncer.ini" ]
        imagePullPolicy: IfNotPresent
        ports:
        - name: pgbouncer
          containerPort: 6432
        volumeMounts:
        - name: nfs-pv
          mountPath: "/opt/local"
          readOnly: false
      restartPolicy: Always
      volumes:
      - name: nfs-pv
        persistentVolumeClaim:
          claimName: nfs-pvc

---

apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: metadig
spec:
  selector:
    app: postgres
  ports:
  - name: postgres
    port: 5432
    protocol: TCP
    targetPort: postgres
    # disable pgbouncer until closed connection problem can be fixed 20181126
    # i.e set the 'targetPort' back to pgbouncer so that connections to the DB (port 6432)
    # go through pgbouncer and not through postgres directly
    # pcs: 20190416 - testing with pgbouncer again
  - name: pgbouncer
    port: 6432
    protocol: TCP
    targetPort: pgbouncer
    #targetPort: postgres
